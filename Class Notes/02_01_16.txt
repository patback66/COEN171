02_01_16
COEN 171

EC 108 5.10pm Review Session
  - Midterm Friday

Objectives
  - Finish Chapter 8 - assignments
    - Repetition
  - Funcitons (not on midterm)

for(sts; cond; up-sts) {
  //->how to terminate
    - return -> out of function
    - GOTO -> unconditional branch. Jump into an address in memory
    - break -> out of block but block must be a repetition or a switch (not if statements)
    - continue -> skip the next inst on body of loop and force re-evalutation of the condition
}

In python:
  for count in [1,2,5]:
  for x in range(10) //0 to 9
                (1,5)
                (1,5,2) //step

Unconditional Branch
  - GOTO
    Uncod.           ARM         C
                    B label     GOTO x;
    condition       Beq label   if(a<=b)

Chapter 9-10 Subprograms (NOT ON MIDTERM)

Functions
  - Why?
      - reuse
      - error checking
      - split task - modularity
      - readability
      - What?
      - Block of code that gets executed when we call that name
        - referenced by a "unique" name
  1.  //subprogram def
  2.  //subprogram call

1. define
  header: name(if anonymous func not necessary)
          input parameters -> how many
          return -> how many?
                 -> do I need to say type?


In C
#include <stdarg.h>

int func(int c, ...) {
  func(...)
}

call-> func(1,2,3)
def -> void func(int a, int b, int c)
  - parameter passing
    - value
    - reference
    - value-result
      func(out a, in b)

------------------------------------------------------
Review Session

Chapter 1
  Prelim
  1.1-1.6

Chapter 2 XXXXXXXXXXXXXXXXXXXXXXX

Chapter 3
  Syntax and semantics
  3.1-3.3
  3.5 Only the concept of what is semantic

Chapter 4 XXXXXXXXXXXXXXXXXXXXXXX

Chapter 5
  5.1-5.6
  5.8

Chapter 6
  6.1,6.2,6.3 Strings
  6.5
  6.6 -> example in python
  6.7 -> Record -> struct in C only mention
  6.11
  6.12-6.13

Chapter 7
  Expressions and Assignments
  7.1-7.4
  7.6

Chapter 8 Statement level control
  8.3 Iterative
  8.4 Unconditional branch

More like a quiz -> details

Binding vs scoping

a=A+B+C
var->A|B|C
  Yes because var not case sensitive

Static vs dynamic scoping
  - static at compile time, before execution
    - you know at a static time what the scope of the variable is

Stack
  - changes place in memory

Static binding vs static scoping

Type Binding
  var to the type

Storage binding
  var to the value
    a. static
    b. stack -> memory stack
    c. dynamic -> memory dynamic

    DATA MEMORY
    Stack
    -----
    Local
      |
     \/

     /\
      |
    Heap

  static int a; //explicit
         a=7 //implicit
  dynamic -> a=7
            a=[1,2,3,4]

  fucn sub1(){
    var x //1
    func sub2(){
      var x //2
      func sub3(){

      }
    }
  }

  static
    main->sub1 2
    main->sub2 error
    main->sub 1

  dynamic
    main->sub1 2
    main->sub2 error (never refer to 1)
    main->sub3
